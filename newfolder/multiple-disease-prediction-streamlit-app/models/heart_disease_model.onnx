<NetronModel>
  <model name="Heart Disease Prediction Model">
    <metadata>
      <ir_version>7</ir_version>
      <producer_name>OnnxTool</producer_name>
      <producer_version>1.9.0</producer_version>
      <domain>ai.onnx</domain>
      <model_version>1.0</model_version>
      <doc_string>Heart disease prediction model based on medical features such as age, cholesterol levels, etc.</doc_string>
    </metadata>
    <input name="input" shape="1x13" dtype="float32"/>
    <output name="output" shape="1x1" dtype="int64"/>
    <graph>
      <!-- Fully connected layer (Gemm) with input layer -->
      <node name="fc1" op_type="Gemm">
        <input>input</input>
        <output>fc1_output</output>
        <attribute name="alpha" value="1.0"/>
        <attribute name="beta" value="1.0"/>
      </node>
      
      <!-- ReLU activation function after first fully connected layer -->
      <node name="relu" op_type="Relu">
        <input>fc1_output</input>
        <output>relu_output</output>
      </node>
      
      <!-- Second fully connected layer (Gemm) -->
      <node name="fc2" op_type="Gemm">
        <input>relu_output</input>
        <output>fc2_output</output>
        <attribute name="alpha" value="1.0"/>
        <attribute name="beta" value="1.0"/>
      </node>

      <!-- ReLU activation function after second fully connected layer -->
      <node name="relu2" op_type="Relu">
        <input>fc2_output</input>
        <output>relu2_output</output>
      </node>

      <!-- Output layer with Softmax activation function -->
      <node name="output_layer" op_type="Softmax">
        <input>relu2_output</input>
        <output>output</output>
      </node>
    </graph>
    
    <initializer>
      <!-- Weights and biases for the first fully connected layer -->
      <tensor name="fc1_weights" shape="13x10" dtype="float32">[ ... ]</tensor>
      <tensor name="fc1_biases" shape="10" dtype="float32">[ ... ]</tensor>

      <!-- Weights and biases for the second fully connected layer -->
      <tensor name="fc2_weights" shape="10x5" dtype="float32">[ ... ]</tensor>
      <tensor name="fc2_biases" shape="5" dtype="float32">[ ... ]</tensor>

      <!-- Weights and biases for the output layer -->
      <tensor name="output_layer_weights" shape="5x1" dtype="float32">[ ... ]</tensor>
      <tensor name="output_layer_biases" shape="1" dtype="float32">[ ... ]</tensor>
    </initializer>
  </model>
</NetronModel>

